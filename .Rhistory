count(diag, wt = weight, sort = TRUE)
summary_age_sex <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
return(list(
summary_location = summary_location,
summary_body_part = summary_body_part,
summary_diag = summary_diag,
summary_age_sex = summary_age_sex
))
}
library(shiny)
# Define the Shiny app
app <- shinyApp(ui, server)
library(vroom)
library(tidyverse)
load_data <- function() {
injuries <- vroom::vroom("data/injuries.tsv")
products <- vroom::vroom("data/products.tsv")
population <- vroom::vroom("data/population.tsv")
return(list(injuries = injuries, products = products, population = population))
}
explore_product <- function(injuries, products, population, product_code) {
selected <- injuries %>% filter(prod_code == product_code)
summary_location <- selected %>%
count(location, wt = weight, sort = TRUE)
summary_body_part <- selected %>%
count(body_part, wt = weight, sort = TRUE)
summary_diag <- selected %>%
count(diag, wt = weight, sort = TRUE)
summary_age_sex <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
return(list(
summary_location = summary_location,
summary_body_part = summary_body_part,
summary_diag = summary_diag,
summary_age_sex = summary_age_sex
))
}
library(shiny)
# Define the Shiny app
app <- shinyApp(ui, server)
library(dplyr)
library(ggplot2)
library(vroom)
library(forcats)
library(purrr)
library(shiny)
# Source the functions file
source("R/eda.R")
# Load data
data <- load_data()
injuries <- data$injuries
products <- data$products
population <- data$population
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title),
width = "100%"
)
),
column(2, selectInput("y", "Y axis", c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
server <- function(input, output, session) {
selected_data <- reactive({
explore_product(injuries, products, population, input$code)
})
output$diag <- renderTable({
selected_data()$summary_diag
}, width = "100%")
output$body_part <- renderTable({
selected_data()$summary_body_part
}, width = "100%")
output$location <- renderTable({
selected_data()$summary_location
}, width = "100%")
output$age_sex <- renderPlot({
if (input$y == "rate") {
ggplot(selected_data()$summary_age_sex, aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Lesiones por cada 10.000 personas")
} else {
ggplot(selected_data()$summary_age_sex, aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Número estimado de lesiones")
}
})
}
shinyApp(ui, server)
library(vroom)
library(tidyverse)
load_data <- function() {
injuries <- vroom::vroom("data/injuries.tsv")
products <- vroom::vroom("data/products.tsv")
population <- vroom::vroom("data/population.tsv")
return(list(injuries = injuries, products = products, population = population))
}
explore_product <- function(injuries, products, population, product_code) {
selected <- injuries %>% filter(prod_code == product_code)
summary_location <- selected %>%
count(location, wt = weight, sort = TRUE)
summary_body_part <- selected %>%
count(body_part, wt = weight, sort = TRUE)
summary_diag <- selected %>%
count(diag, wt = weight, sort = TRUE)
summary_age_sex <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
return(list(
summary_location = summary_location,
summary_body_part = summary_body_part,
summary_diag = summary_diag,
summary_age_sex = summary_age_sex
))
}
library(dplyr)
library(ggplot2)
library(vroom)
library(forcats)
library(purrr)
library(shiny)
# Source the functions file
source("R/eda.R")
# Load data
data <- load_data()
injuries <- data$injuries
products <- data$products
population <- data$population
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title),
width = "100%"
)
),
column(2, selectInput("y", "Y axis", c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
server <- function(input, output, session) {
selected_data <- reactive({
explore_product(injuries, products, population, input$code)
})
output$diag <- renderTable({
selected_data()$summary_diag
}, width = "100%")
output$body_part <- renderTable({
selected_data()$summary_body_part
}, width = "100%")
output$location <- renderTable({
selected_data()$summary_location
}, width = "100%")
output$age_sex <- renderPlot({
if (input$y == "rate") {
ggplot(selected_data()$summary_age_sex, aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Lesiones por cada 10.000 personas")
} else {
ggplot(selected_data()$summary_age_sex, aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Número estimado de lesiones")
}
})
}
shinyApp(ui, server)
library(vroom)
library(tidyverse)
load_data <- function() {
injuries <- vroom::vroom("data/injuries.tsv")
products <- vroom::vroom("data/products.tsv")
population <- vroom::vroom("data/population.tsv")
return(list(injuries = injuries, products = products, population = population))
}
explore_product <- function(injuries, products, population, product_code) {
selected <- injuries %>% filter(prod_code == product_code)
summary_location <- selected %>%
count(location, wt = weight, sort = TRUE)
summary_body_part <- selected %>%
count(body_part, wt = weight, sort = TRUE)
summary_diag <- selected %>%
count(diag, wt = weight, sort = TRUE)
summary_age_sex <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
return(list(
summary_location = summary_location,
summary_body_part = summary_body_part,
summary_diag = summary_diag,
summary_age_sex = summary_age_sex
))
}
library(dplyr)
library(ggplot2)
library(vroom)
library(forcats)
library(purrr)
library(shiny)
# Source the functions file
source("R/eda.R")
# Load data
data <- load_data()
injuries <- data$injuries
products <- data$products
population <- data$population
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title),
width = "100%"
)
),
column(2, selectInput("y", "Y axis", c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
server <- function(input, output, session) {
selected_data <- reactive({
explore_product(injuries, products, population, input$code)
})
output$diag <- renderTable({
selected_data()$summary_diag
}, width = "100%")
output$body_part <- renderTable({
selected_data()$summary_body_part
}, width = "100%")
output$location <- renderTable({
selected_data()$summary_location
}, width = "100%")
output$age_sex <- renderPlot({
if (input$y == "rate") {
ggplot(selected_data()$summary_age_sex, aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Lesiones por cada 10.000 personas")
} else {
ggplot(selected_data()$summary_age_sex, aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Número estimado de lesiones")
}
})
}
shinyApp(ui, server)
library(shiny)
# Define the Shiny app
app <- shinyApp(ui, server)
# Run the Shiny app
runApp(app, port = 8000, host = "0.0.0.0")
library(vroom)
library(tidyverse)
load_data <- function() {
injuries <- vroom::vroom("data/injuries.tsv")
products <- vroom::vroom("data/products.tsv")
population <- vroom::vroom("data/population.tsv")
return(list(injuries = injuries, products = products, population = population))
}
explore_product <- function(injuries, products, population, product_code) {
selected <- injuries %>% filter(prod_code == product_code)
summary_location <- selected %>%
count(location, wt = weight, sort = TRUE)
summary_body_part <- selected %>%
count(body_part, wt = weight, sort = TRUE)
summary_diag <- selected %>%
count(diag, wt = weight, sort = TRUE)
summary_age_sex <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
return(list(
summary_location = summary_location,
summary_body_part = summary_body_part,
summary_diag = summary_diag,
summary_age_sex = summary_age_sex
))
}
library(vroom)
library(tidyverse)
load_data <- function() {
injuries <- vroom::vroom("data/injuries.tsv")
products <- vroom::vroom("data/products.tsv")
population <- vroom::vroom("data/population.tsv")
return(list(injuries = injuries, products = products, population = population))
}
explore_product <- function(injuries, products, population, product_code) {
selected <- injuries %>% filter(prod_code == product_code)
summary_location <- selected %>%
count(location, wt = weight, sort = TRUE)
summary_body_part <- selected %>%
count(body_part, wt = weight, sort = TRUE)
summary_diag <- selected %>%
count(diag, wt = weight, sort = TRUE)
summary_age_sex <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
return(list(
summary_location = summary_location,
summary_body_part = summary_body_part,
summary_diag = summary_diag,
summary_age_sex = summary_age_sex
))
}
library(dplyr)
library(ggplot2)
library(vroom)
library(forcats)
library(purrr)
library(shiny)
# Source the functions file
source("R/eda.R")
# Load data
data <- load_data()
injuries <- data$injuries
products <- data$products
population <- data$population
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title),
width = "100%"
)
),
column(2, selectInput("y", "Y axis", c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
server <- function(input, output, session) {
selected_data <- reactive({
explore_product(injuries, products, population, input$code)
})
output$diag <- renderTable({
selected_data()$summary_diag
}, width = "100%")
output$body_part <- renderTable({
selected_data()$summary_body_part
}, width = "100%")
output$location <- renderTable({
selected_data()$summary_location
}, width = "100%")
output$age_sex <- renderPlot({
if (input$y == "rate") {
ggplot(selected_data()$summary_age_sex, aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Lesiones por cada 10.000 personas")
} else {
ggplot(selected_data()$summary_age_sex, aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Número estimado de lesiones")
}
})
}
shinyApp(ui, server)
library(dplyr)
library(ggplot2)
library(vroom)
library(forcats)
library(purrr)
library(shiny)
# Source the functions file
source("R/eda.R")
# Load data
data <- load_data()
injuries <- data$injuries
products <- data$products
population <- data$population
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title),
width = "100%"
)
),
column(2, selectInput("y", "Y axis", c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
server <- function(input, output, session) {
selected_data <- reactive({
explore_product(injuries, products, population, input$code)
})
output$diag <- renderTable({
selected_data()$summary_diag
}, width = "100%")
output$body_part <- renderTable({
selected_data()$summary_body_part
}, width = "100%")
output$location <- renderTable({
selected_data()$summary_location
}, width = "100%")
output$age_sex <- renderPlot({
if (input$y == "rate") {
ggplot(selected_data()$summary_age_sex, aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Lesiones por cada 10.000 personas")
} else {
ggplot(selected_data()$summary_age_sex, aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Número estimado de lesiones")
}
})
}
shinyApp(ui, server)
library(dplyr)
library(ggplot2)
library(vroom)
library(forcats)
library(purrr)
library(shiny)
# Source the functions file
source("R/eda.R")
# Load data
data <- load_data()
injuries <- data$injuries
products <- data$products
population <- data$population
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title),
width = "100%"
)
),
column(2, selectInput("y", "Y axis", c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
server <- function(input, output, session) {
selected_data <- reactive({
explore_product(injuries, products, population, input$code)
})
output$diag <- renderTable({
selected_data()$summary_diag
}, width = "100%")
output$body_part <- renderTable({
selected_data()$summary_body_part
}, width = "100%")
output$location <- renderTable({
selected_data()$summary_location
}, width = "100%")
output$age_sex <- renderPlot({
if (input$y == "rate") {
ggplot(selected_data()$summary_age_sex, aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Lesiones por cada 10.000 personas")
} else {
ggplot(selected_data()$summary_age_sex, aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Número estimado de lesiones")
}
})
}
shinyApp(ui, server)
